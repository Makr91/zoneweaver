name: Release Please

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release

  build-packages:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: self-hosted
    strategy:
      matrix:
        package-type: [debian, omnios]
      fail-fast: true  # Fail entire build if either package fails
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci
          
      - name: Build frontend
        run: npm run build
        
      - name: Create Debian package
        if: matrix.package-type == 'debian'
        run: |
          export VERSION=${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }}.${{ needs.release-please.outputs.patch }}
          export PACKAGE_NAME="zoneweaver"
          export ARCH="amd64"
          
          # Create package structure
          mkdir -p "${PACKAGE_NAME}_${VERSION}_${ARCH}"/{opt/zoneweaver/web,etc/zoneweaver,etc/systemd/system,var/lib/zoneweaver,var/log/zoneweaver,DEBIAN}
          
          # Copy application files
          cp -r controllers models routes middleware config utils scripts index.js package.json "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/zoneweaver/"
          cp -r node_modules "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/zoneweaver/"
          cp -r web/dist "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/zoneweaver/web/dist"
          
          # Configuration files
          cp packaging/config/production-config.yaml "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/zoneweaver/config.yaml"
          cp packaging/systemd/zoneweaver.service "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/systemd/system/"
          
          # DEBIAN files
          cp packaging/DEBIAN/postinst packaging/DEBIAN/prerm packaging/DEBIAN/postrm "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN/"
          
          # Create control file with dynamic version
          cat > "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN/control" << EOF
          Package: zoneweaver
          Version: ${VERSION}
          Section: misc
          Priority: optional
          Architecture: ${ARCH}
          Maintainer: Makr91 <makr91@users.noreply.github.com>
          Depends: nodejs (>= 18.0.0), sqlite3, openssl
          Description: ZoneWeaver - Zone Hypervisor Management Interface
           Web-based management interface for WebHyve zone hypervisors.
           Provides intuitive control over zones, networking, and storage
           through a modern React frontend and Node.js API backend.
          Homepage: https://github.com/Makr91/zoneweaver
          EOF
          
          # Set permissions
          find "${PACKAGE_NAME}_${VERSION}_${ARCH}" -type d -exec chmod 755 {} \;
          find "${PACKAGE_NAME}_${VERSION}_${ARCH}" -type f -exec chmod 644 {} \;
          chmod 755 "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN"/{postinst,prerm,postrm}
          
          # Build package
          dpkg-deb --build "${PACKAGE_NAME}_${VERSION}_${ARCH}" "${PACKAGE_NAME}_${VERSION}_${ARCH}.deb"

      - name: Build OmniOS package
        if: matrix.package-type == 'omnios'
        run: |
          export VERSION=${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }}.${{ needs.release-please.outputs.patch }}
          
          # Sync source to OmniOS build machine
          rsync -av --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='web/node_modules' \
            ./ ghrunner@hv04.home.m4kr.net:/Array-0/zoneweaver/builds/
          
          # Build package on OmniOS
          ssh ghrunner@hv04.home.m4kr.net "
            cd /Array-0/zoneweaver/builds && 
            export PATH=/opt/ooce/bin:/opt/ooce/node-22/bin:\$PATH &&
            export MAKE=gmake &&
            ./packaging/omnios/build.sh
          "
          
          # Sync built packages back to Linux runner
          rsync -av ghrunner@hv04.home.m4kr.net:/Array-0/zoneweaver/builds/*.p5p ./ || true
          rsync -av ghrunner@hv04.home.m4kr.net:/Array-0/zoneweaver/builds/zoneweaver*.p5m.final ./ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.package-type }}
          path: |
            *.deb
            *.p5p
            *.p5m.final
          retention-days: 1

  upload-release-assets:
    needs: [release-please, build-packages]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: self-hosted
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all built packages to the release
          for file in *.deb *.p5p *.p5m.final; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ needs.release-please.outputs.tag_name }} "$file" --clobber
            fi
          done
